"""
Django settings for Django2 project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import dj_database_url
from google.oauth2 import service_account # No settings.py, para usar a chave JSON da conta de serviço do Google Cloud, deve-se importar a classe service_account do módulo oauth2 da biblioteca do google

# Usando PostgreeSQL com Render; a linha de codigo abaixo está dizendo ao Django:
# “Minha configuração de banco de dados principal (‘default’) será carregada a partir de uma URL de conexão, e quem vai interpretar essa URL é a biblioteca dj_database_url.”
# dj_database_url é um pacote Python usado para simplificar a configuração do banco de dados no Django.#
# dj_database_url.config() procura uma variável de ambiente chamada DATABASE_URL no sistema (ou no .env se você estiver usando).
# # Essa variável normalmente contém todos os dados de conexão no formato URL.
# DATABASES = {
    # 'default': {
        # 'ENGINE': 'django.db.backends.mysql',  # Banco MySQL local
        # 'NAME': 'Django2',
        # 'USER': 'jcog',
        # 'PASSWORD': 'MON010deo010',
        # 'HOST': 'localhost',
        # 'PORT': '3306',
    # }
# }
DATABASES = {
    'default': dj_database_url.config(
        default = 'mysql://jcog:MON010deo010@localhost:3306/Django2',  # banco local padrão, se DATABASE_URL não existir
        conn_max_age = 600,
        ssl_require = False # ssl_require=False nesse contexto indica que a conexão com o banco de dados não exige usar SSL (Secure Sockets Layer) para comunicação segura. SSL é um protocolo que criptografa a comunicação entre sua aplicação Django e o banco de dados para garantir segurança, especialmente em conexões pela internet.
    )
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@(3(^n#fjqx1$3+ji)zm-mhgu1edap!y6crwhho_8n0q36uy7u'

# SECURITY WARNING: don't run with debug turned on in production!
# Modo desenvolvimento: DEBUG = True
# Modo produção: DEBUG = False
# O Render define automaticamente a variável de ambiente RENDER como 'TRUE'
RENDER = os.environ.get('RENDER') == 'TRUE'
DEBUG = not RENDER

ALLOWED_HOSTS = ['*'] # Para funcionar com qualquer host


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', # aplicação que nós criamos
    'bootstrap4', # biblioteca/aplicação django-bootstrap4 que nós instalamos
    'stdimage', # biblioteca/aplicação django-stdimage que nós instalamos
    'pictures', # biblioteca/aplicação django-pictures que nós instalamos
    'storages' # biblioteca/aplicação  django-storages[google]
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Só iremos precisar disso quando formos colocar a aplicação em produção/publicação
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Django2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'], # Avisa que dentro do diretório das aplicações, um diretório de templates será criado, dentro do qual estarão os nossos templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

PICTURES = {
    "BREAKPOINTS": {'thumb': 200, "mobile": 576, "tablet": 768, "desktop": 992}, # Define larguras de tela (em pixels) que servirão como referência para gerar imagens otimizadas para diferentes dispositivos.
    "GRID_COLUMNS": 12, # Define o número de colunas no seu sistema de grid CSS, geralmente igual ao do Bootstrap. Ajuda o Django Pictures a entender quanto espaço (em colunas) uma imagem deve ocupar, para gerar os tamanhos ideais.
    "CONTAINER_WIDTH": 1200, # Largura máxima do container principal do seu site (em pixels). Usado como referência para gerar larguras proporcionais das imagens. Exemplo: se a imagem deve ocupar 6 colunas de 12 (metade), ela será gerada com 600px de largura (metade de 1200).
    "FILE_TYPES": ["WEBP", "JPG", "JPEG", "BMP", "PNG"], # Lista de formatos de imagem que o sistema deve gerar.
    "PIXEL_DENSITIES": [1, 2], # Gera imagens para diferentes tipos de tela: 1) resolução normal; 2) telas de alta densidade (Retina displays, por exemplo). Isso garante que as imagens fiquem nítidas em todos os dispositivos.
    "USE_PLACEHOLDERS": True,
}

WSGI_APPLICATION = 'Django2.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
    # 'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
    # }
# }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import json
import tempfile

GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON')

if GOOGLE_CREDENTIALS_JSON:
    # Criar um arquivo temporário com as credenciais
    with tempfile.NamedTemporaryFile(delete = False, suffix = '.json') as temp_file:
        temp_file.write(GOOGLE_CREDENTIALS_JSON.encode())
        temp_file_path = temp_file.name

    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(temp_file_path)

else:
    # fallback local (desenvolvimento)
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        os.path.join(BASE_DIR, 'credenciais.json')
    )

# A linha de código abaixo informa ao Django que o backend padrão para armazenar arquivos enviados (ex: imagens) será o Google Cloud Storage (GCS).
# Ou seja, quando você fizer upload de arquivos, eles serão armazenados no bucket do GCS, não no sistema de arquivos local.
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# A linha de código abaixo carrega as credenciais da conta de serviço do Google Cloud, usando o arquivo JSON baixado.
# Isso autentica sua aplicação Django para acessar o bucket no GCS.
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.join(BASE_DIR, 'credenciais.json')
)

# A linha de código abaixo define o nome do bucket no Google Cloud Storage onde os arquivos serão armazenados (django-render). Um bucket é basicamente uma pasta/container no GCS.
GS_BUCKET_NAME = 'django-render'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Usando na produção/publicação: o collectstatic pega todos os arquivos estáticos de nossa aplicação e coloca dentro deste diretório

# As linhas de código a seguir servem para configurar o tratamento de arquivos de mídia (imagens, vídeos, etc) que os usuários enviam.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Define o caminho físico na máquina onde os arquivos enviados serão armazenados. BASE_DIR normalmente é o diretório raiz do seu projeto. Então, todos os arquivos enviados serão guardados na pasta media dentro do seu projeto.

if RENDER:
    # Produção no Render
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/' # representa a URL base pública onde os arquivos de mídia do seu projeto Django estarão acessíveis depois de enviados para o bucket do Google Cloud Storage.
else:
    # Desenvolvimento local
    MEDIA_URL = '/media/'

# configurações de email
# O código a seguir significa que o Django vai imprimir os e-mails no console (terminal) em vez de enviá-los de verdade.
# É usado principalmente durante o desenvolvimento, para testar o envio de e-mails (como formulários de contato, redefinição de senha,
# confirmação de cadastro etc.) sem precisar configurar um servidor de e-mail real.
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
"""
# As linhas de código a seguir configuram o Django para enviar e-mails usando SMTP, ou seja, um servidor de envio real 
# (diferente do backend de console que só imprime no terminal).
EMAIL_HOST = 'localhost' # 'localhost' significa que está tentando enviar e-mails usando um servidor rodando na sua própria máquina.
EMAIL_PORT = 587 # A porta 587 é a porta padrão para SMTP com STARTTLS (criptografia). É uma boa prática de segurança.
EMAIL_USE_TLS = True # Ativa o uso de STARTTLS, que é uma forma segura de iniciar uma conexão criptografada.
EMAIL_HOST_PASSWORD = '<PASSWORD>'
EMAIL_HOST_USER = 'no-reply@seudominio.com' # Esse é o endereço de e-mail que vai aparecer como remetente. Normalmente, é o mesmo que o usuário autenticado no SMTP (ex: no-reply@seudominio.com).
"""

