"""
Django settings for Django2 project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Importações padrão para configuração e gerenciamento de caminhos
import os  # Biblioteca padrão para interagir com o sistema operacional (variáveis de ambiente, caminhos, etc)
from pathlib import Path  # Facilita manipulação de caminhos de forma independente do sistema operacional
import dj_database_url  # Biblioteca que transforma URL de conexão do banco em dicionário esperado pelo Django
from google.oauth2 import service_account
# Classe para carregar credenciais do Google Cloud a partir de arquivo JSON (conta de serviço)
import tempfile  # Biblioteca para criar arquivos temporários, útil para armazenar credenciais temporariamente

# Usando PostgreeSQL com Render; a linha de codigo abaixo está dizendo ao Django:
# “Minha configuração de banco de dados principal (‘default’) será carregada a partir de uma URL de conexão, e quem vai interpretar essa URL é a biblioteca dj_database_url.”
# dj_database_url é um pacote Python usado para simplificar a configuração do banco de dados no Django.
# Ele lê a URL de conexão (no formato padrão) e converte para o dicionário que o Django espera.
DATABASES = {
    'default': dj_database_url.config(
        default='mysql://jcog:MON010deo010@localhost:3306/Django2',  # banco local padrão, se DATABASE_URL não existir
        conn_max_age=600,  # Tempo de conexão persistente com o banco em segundos (melhora performance)
        ssl_require=False  # ssl_require=False nesse contexto indica que a conexão com o banco de dados não exige SSL.
    )
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR aponta para a pasta raiz do projeto, usada para construir caminhos absolutos
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# Chave secreta do Django usada para criptografia e segurança de sessões, nunca deve ser exposta publicamente
SECRET_KEY = 'django-insecure-@(3(^n#fjqx1$3+ji)zm-mhgu1edap!y6crwhho_8n0q36uy7u'

# O Render define automaticamente a variável de ambiente RENDER como 'TRUE'
RENDER = os.environ.get('RENDER') == 'TRUE'
# DEBUG é ativado apenas se não estiver rodando no Render (ambiente de produção)
DEBUG = not RENDER

ALLOWED_HOSTS = ['*']  # Permite acesso de qualquer host (necessário para testes e hospedagem flexível)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',  # Admin do Django
    'django.contrib.auth',  # Sistema de autenticação
    'django.contrib.contenttypes',  # Suporte a tipos de conteúdo genéricos
    'django.contrib.sessions',  # Gerenciamento de sessões do usuário
    'django.contrib.messages',  # Sistema de mensagens do Django
    'django.contrib.staticfiles',  # Gerenciamento de arquivos estáticos
    'core',  # aplicação que nós criamos
    'bootstrap4',  # biblioteca django-bootstrap4 para frontend com Bootstrap
    'stdimage',  # biblioteca django-stdimage para manipulação de imagens
    'pictures',  # biblioteca django-pictures para galeria de imagens
    'storages'  # biblioteca django-storages[google] para integração com Google Cloud Storage
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Middleware de segurança do Django
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Necessário para servir arquivos estáticos em produção
    'django.contrib.sessions.middleware.SessionMiddleware',  # Gerencia sessões HTTP
    'django.middleware.common.CommonMiddleware',  # Middleware comum para diversas funcionalidades
    'django.middleware.csrf.CsrfViewMiddleware',  # Proteção contra CSRF (ataques cross-site request forgery)
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Autenticação do usuário
    'django.contrib.messages.middleware.MessageMiddleware',  # Middleware para mensagens flash
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Proteção contra clickjacking
]

ROOT_URLCONF = 'Django2.urls'  # Arquivo principal de rotas URL

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Backend de templates do Django
        'DIRS': ['templates'],  # Diretório de templates customizados
        'APP_DIRS': True,  # Procura templates nas pastas 'templates' de cada app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',  # Torna o request acessível nos templates
                'django.contrib.auth.context_processors.auth',  # Adiciona contexto de autenticação
                'django.contrib.messages.context_processors.messages',  # Adiciona contexto para mensagens
            ],
        },
    },
]

PICTURES = {
    "BREAKPOINTS": {'thumb': 200, "mobile": 576, "tablet": 768, "desktop": 992},
    # Pontos de corte responsivos para imagens
    "GRID_COLUMNS": 12,  # Número de colunas para grid
    "CONTAINER_WIDTH": 1200,  # Largura máxima do container
    "FILE_TYPES": ["WEBP", "JPG", "JPEG", "BMP", "PNG"],  # Tipos de arquivo aceitos para imagens
    "PIXEL_DENSITIES": [1, 2],  # Densidades para retina, etc
    "USE_PLACEHOLDERS": True,  # Usar imagens placeholder enquanto carrega
}

WSGI_APPLICATION = 'Django2.wsgi.application'  # Aplicação WSGI para servir o projeto

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},  # Validador de similaridade
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},  # Validador de tamanho mínimo
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},  # Validador de senhas comuns
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},  # Validador de senha apenas numérica
]

LANGUAGE_CODE = 'pt-br'  # Idioma padrão do projeto
TIME_ZONE = 'America/Sao_Paulo'  # Fuso horário padrão
USE_I18N = True  # Habilita internacionalização
USE_TZ = True  # Habilita uso de timezone-aware datetime
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Tipo padrão para campos AutoField no Django

# -------------------------------------------------------------------
# Configuração de credenciais do Google Cloud Storage
# -------------------------------------------------------------------

# A variável de ambiente GOOGLE_APPLICATION_CREDENTIALS_JSON deve conter
# todo o conteúdo do arquivo JSON da conta de serviço do Google Cloud.
# Isso é mais seguro do que manter um arquivo físico no repositório.
# No ambiente local, é possível usar um arquivo credenciais.json apenas para testes.

# Recupera o JSON das credenciais da variável de ambiente (string com conteúdo JSON)
gcp_credentials_json = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS_JSON")

if gcp_credentials_json:
    # Criar um arquivo temporário com as credenciais
    # Isso é necessário porque a API do GCS espera um caminho de arquivo,
    # não uma string diretamente.
    with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as temp_cred_file:
        # Escreve o conteúdo da variável de ambiente no arquivo temporário
        temp_cred_file.write(gcp_credentials_json.encode("utf-8"))
        temp_cred_file_path = temp_cred_file.name

    # Carregar credenciais a partir do arquivo temporário
    # 'service_account.Credentials.from_service_account_file' lê o arquivo JSON e cria objeto de credenciais
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(temp_cred_file_path)

else:
    # Fallback para ambiente local (desenvolvimento)
    # Aqui usamos um arquivo credenciais.json que deve estar no diretório BASE_DIR.
    # Isso **não** deve ser usado em produção.
    cred_file = os.path.join(BASE_DIR, "credenciais.json")
    if os.path.exists(cred_file):
        # Se existir o arquivo local, carrega as credenciais dele
        GS_CREDENTIALS = service_account.Credentials.from_service_account_file(cred_file)
    else:
        # Caso não exista arquivo nem variável, levanta erro para avisar que está faltando a credencial
        raise FileNotFoundError(
            "Arquivo credenciais.json não encontrado e variável GOOGLE_APPLICATION_CREDENTIALS_JSON não está definida."
        )

# -------------------------------------------------------------------
# Configurações de armazenamento no GCS
# -------------------------------------------------------------------

# Nome do bucket no Google Cloud Storage
GS_BUCKET_NAME = "django-render"

# URLs para acesso público (para arquivos estáticos e mídia)
STATIC_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/static/"
MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/media/"

# Backend de armazenamento com separação de pastas (evita colisões)
# Aqui definimos o uso do django-storages com Google Cloud Storage, especificando bucket e pasta padrão
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            "bucket_name": GS_BUCKET_NAME,
            "credentials": GS_CREDENTIALS,
            "location": "media",  # pasta padrão para arquivos enviados
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            "bucket_name": GS_BUCKET_NAME,
            "credentials": GS_CREDENTIALS,
            "location": "static",  # pasta padrão para arquivos estáticos
        },
    },
}

# Diretórios locais para desenvolvimento

# Local onde os arquivos de mídia são salvos localmente
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Local onde os arquivos estáticos são coletados localmente
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# --- INCLUSÃO ADICIONAL:
# STATICFILES_DIRS indica onde o Django deve procurar arquivos estáticos adicionais antes de coletá-los para STATIC_ROOT.
# Aqui incluímos o diretório 'core/static', que contém seus arquivos estáticos personalizados.
# STATICFILES_DIRS = [
#    BASE_DIR / 'core' / 'static',
# ]

# Isso garante que, ao rodar 'python manage.py collectstatic', todos os arquivos estáticos de apps e
# os arquivos em 'core/static' sejam coletados e enviados para o bucket, mantendo a estrutura correta.

# Configurações de email (comentadas por padrão)
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
"""
EMAIL_HOST = 'localhost'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_PASSWORD = '<PASSWORD>'
EMAIL_HOST_USER = 'no-reply@seudominio.com'
"""
